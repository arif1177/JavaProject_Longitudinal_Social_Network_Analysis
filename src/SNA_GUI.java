
/**
 *
 * @author Arif Khan
 * @resource Quaqua Leopard Cross platform
 * @resource Web look and feel
 */
import java.awt.AWTException;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Font;
import java.awt.Frame;
import java.awt.MouseInfo;
import java.awt.Point;
import java.awt.Robot;
import java.awt.Toolkit;
import java.awt.event.InputEvent;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.UIManager;
import javax.swing.filechooser.FileNameExtensionFilter;
import org.gephi.data.attributes.api.AttributeColumn;
import org.gephi.data.attributes.api.AttributeController;
import org.gephi.data.attributes.api.AttributeModel;
import org.gephi.graph.api.DirectedGraph;
import org.gephi.graph.api.Edge;
import org.gephi.graph.api.GraphController;
import org.gephi.graph.api.GraphModel;
import org.gephi.graph.api.Node;
import org.gephi.layout.plugin.force.StepDisplacement;
import org.gephi.layout.plugin.force.yifanHu.YifanHuLayout;
import org.gephi.preview.api.PreviewController;
import org.gephi.preview.api.PreviewModel;
import org.gephi.preview.api.PreviewProperty;
import org.gephi.preview.api.ProcessingTarget;
import org.gephi.preview.api.RenderTarget;
import org.gephi.preview.types.DependantOriginalColor;
import org.gephi.project.api.ProjectController;
import org.gephi.project.api.Workspace;
import org.gephi.ranking.api.Ranking;
import org.gephi.ranking.api.RankingController;
import org.gephi.ranking.api.Transformer;
import org.gephi.ranking.plugin.transformer.AbstractColorTransformer;
import org.gephi.ranking.plugin.transformer.AbstractSizeTransformer;
import org.gephi.statistics.plugin.GraphDistance;
import org.openide.util.Exceptions;
import org.openide.util.Lookup;
import processing.core.PApplet;

public class SNA_GUI extends javax.swing.JFrame
{

    private ProjectController pc;
    private Workspace workspace;
    private GraphModel graphModel;
    private static JTable dataTable;
    private DirectedGraph directedGraph;
    private PreviewController previewController;
    private static DataTableController dataTableController;
    private static MyDirectedGraph mdg;
    private RankingController rankingController;
    private AttributeModel attributeModel;
    private static ExcelHandler readExcel;
    private static MyInputVerifier miv;
    private JFileChooser fc;
    private static final String LBLDEGCEN = "Degree Centrality";
    private static final String LBLBTWNNSCEN = "Betweenness Centrality";
    private static final String LBLCLSNSCEN = "Closeness Centrality";
    private static final String LBLECCNTRCTCEN = "Eccentricity Centrality";
    public static final int WAITTIMETOCLICK = 100;
    private static boolean hasGraphLoaded = false;
    private static int activeMinAttribute;
    private static int activeMaxAttribute;
    private static boolean isDegreeRanked;
    private static boolean isClsnsRanked;
    private static boolean isBtwnnsRanked;
    private static boolean isEccntrctRanked;

    /**
     * Creates new form SNA_GUI
     */
    public SNA_GUI()
    {
        initComponents();
        this.setExtendedState( getExtendedState() | JFrame.MAXIMIZED_VERT | Frame.MAXIMIZED_HORIZ);
        
        
        dataTableController = new DataTableController();
        dataTable = new JTable(dataTableController.getDataModel());
        dataTable.setAutoCreateRowSorter(true);
        //**insert auto sorting.
        this.panelDataTable.add(new JScrollPane(dataTable));
        miv = new MyInputVerifier();
        txtBxLngtdFilterFrom.setInputVerifier(miv);
        txtBxLngtdFilterTo.setInputVerifier(miv);
        this.fc = new JFileChooser((System.getProperty("user.home") + "/Desktop").replace("\\", "/"));
        //fc.setFileFilter(new FileNameExtensionFilter("Microsoft Word (*.doc, *.docx)", "doc", "docx"));
        this.fc.setFileFilter(new FileNameExtensionFilter("Microsoft Excel (*.xls)", "xls"));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSplitPane2 = new javax.swing.JSplitPane();
        jPanel2 = new javax.swing.JPanel();
        btnImportExcel = new javax.swing.JButton();
        panelGraphStat = new javax.swing.JPanel();
        btnExportToExcel = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        txtBxLngtdFilterFrom = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        txtBxLngtdFilterTo = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        Betweenness = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        chkBxComputeDegree = new javax.swing.JCheckBox();
        chkBxComputeBtwnns = new javax.swing.JCheckBox();
        chkBxComputeClsns = new javax.swing.JCheckBox();
        btnCompute = new javax.swing.JButton();
        lblAllowedRange = new javax.swing.JLabel();
        chkBxComputeEccntrct = new javax.swing.JCheckBox();
        jLabel6 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        viewPanel = new javax.swing.JPanel();
        panelData = new javax.swing.JTabbedPane();
        panelGraph = new javax.swing.JPanel();
        panelDataTable = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Longitudinal Analysis Beta");

        jSplitPane2.setDividerLocation(250);

        jPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        btnImportExcel.setText("Import Excel");
        btnImportExcel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnImportExcelActionPerformed(evt);
            }
        });

        panelGraphStat.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        panelGraphStat.setEnabled(false);

        btnExportToExcel.setText("Export to Excel");
        btnExportToExcel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExportToExcelActionPerformed(evt);
            }
        });

        jLabel1.setText("From");

        txtBxLngtdFilterFrom.setText("5");
        txtBxLngtdFilterFrom.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtBxLngtdFilterFromFocusLost(evt);
            }
        });

        jLabel2.setText("to");

        txtBxLngtdFilterTo.setText("10");

        jLabel3.setText("Degree");

        Betweenness.setText("Betweenness");

        jLabel5.setText("Closeness");

        chkBxComputeBtwnns.setSelected(true);

        btnCompute.setText("COMPUTE");
        btnCompute.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnComputeActionPerformed(evt);
            }
        });

        jLabel6.setText("Eccentricity");

        jButton1.setText("Custom Analyze");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Centrality Overlap");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("DDA");

        jButton4.setText("Aggregated Network");

        jButton5.setText("Merge to One");

        javax.swing.GroupLayout panelGraphStatLayout = new javax.swing.GroupLayout(panelGraphStat);
        panelGraphStat.setLayout(panelGraphStatLayout);
        panelGraphStatLayout.setHorizontalGroup(
            panelGraphStatLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelGraphStatLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelGraphStatLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelGraphStatLayout.createSequentialGroup()
                        .addGroup(panelGraphStatLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jButton4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton5, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnCompute, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnExportToExcel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 202, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, panelGraphStatLayout.createSequentialGroup()
                                .addGroup(panelGraphStatLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(lblAllowedRange, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, panelGraphStatLayout.createSequentialGroup()
                                        .addGroup(panelGraphStatLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(panelGraphStatLayout.createSequentialGroup()
                                                .addComponent(jLabel1)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(txtBxLngtdFilterFrom, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(18, 18, 18)
                                                .addComponent(jLabel2))
                                            .addComponent(jLabel3)
                                            .addComponent(Betweenness)
                                            .addComponent(jLabel5)
                                            .addComponent(jLabel6))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addGroup(panelGraphStatLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(panelGraphStatLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(chkBxComputeDegree, javax.swing.GroupLayout.Alignment.TRAILING)
                                                .addComponent(chkBxComputeBtwnns, javax.swing.GroupLayout.Alignment.TRAILING)
                                                .addComponent(chkBxComputeClsns, javax.swing.GroupLayout.Alignment.TRAILING))
                                            .addComponent(txtBxLngtdFilterTo, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(chkBxComputeEccntrct))))
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(jButton1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(13, 13, 13))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelGraphStatLayout.createSequentialGroup()
                        .addGroup(panelGraphStatLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jButton2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addContainerGap())))
        );
        panelGraphStatLayout.setVerticalGroup(
            panelGraphStatLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelGraphStatLayout.createSequentialGroup()
                .addGap(7, 7, 7)
                .addComponent(lblAllowedRange)
                .addGap(22, 22, 22)
                .addGroup(panelGraphStatLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtBxLngtdFilterFrom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtBxLngtdFilterTo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panelGraphStatLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabel3)
                    .addComponent(chkBxComputeDegree))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelGraphStatLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(Betweenness)
                    .addComponent(chkBxComputeBtwnns))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelGraphStatLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabel5)
                    .addComponent(chkBxComputeClsns))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelGraphStatLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabel6)
                    .addComponent(chkBxComputeEccntrct))
                .addGap(46, 46, 46)
                .addComponent(jButton2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton5)
                .addGap(18, 18, 18)
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 48, Short.MAX_VALUE)
                .addComponent(btnCompute)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnExportToExcel)
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(btnImportExcel, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(panelGraphStat, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnImportExcel)
                .addGap(18, 18, 18)
                .addComponent(panelGraphStat, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        jSplitPane2.setLeftComponent(jPanel2);

        viewPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        viewPanel.setLayout(new java.awt.BorderLayout());

        javax.swing.GroupLayout panelGraphLayout = new javax.swing.GroupLayout(panelGraph);
        panelGraph.setLayout(panelGraphLayout);
        panelGraphLayout.setHorizontalGroup(
            panelGraphLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 448, Short.MAX_VALUE)
        );
        panelGraphLayout.setVerticalGroup(
            panelGraphLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 486, Short.MAX_VALUE)
        );

        panelData.addTab("Graph", panelGraph);

        panelDataTable.setLayout(new java.awt.BorderLayout());
        panelData.addTab("Data", panelDataTable);

        viewPanel.add(panelData, java.awt.BorderLayout.CENTER);

        jSplitPane2.setRightComponent(viewPanel);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jSplitPane2)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jSplitPane2)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private String getExcelFileLocation()
    {

        if (fc.showOpenDialog(this) == JFileChooser.APPROVE_OPTION)
        {
            return fc.getSelectedFile().getAbsolutePath();
        } else
        {
            return "";
        }
    }
    private void btnImportExcelActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnImportExcelActionPerformed
    {//GEN-HEADEREND:event_btnImportExcelActionPerformed
        // TODO add your handling code here:
        String s = this.getExcelFileLocation();
        if (s == null || s.isEmpty())
        {//user cancelled file choosing
            return;
        }
        readExcel = new ExcelHandler(s);
        try
        {
            if (!hasGraphLoaded)
            {
                this.initGraph();
            }
            mdg = new MyDirectedGraph();
            readExcel.readAndPopulateMyGraph(mdg,0);
            dataTableController.clearThenAddBasicGraphNode(mdg, mdg.getMinAttribute(), mdg.getMaxAttribute());//as new excel is loading, calling it with max and min possible attribute
            this.populateBasicGraphVisual(mdg, !hasGraphLoaded, true, mdg.getMinAttribute(), mdg.getMaxAttribute(),true);
            this.doNewLoadedInit();
            this.doAutoClick();
        } catch (Exception e)
        {
            e.printStackTrace();
        }
    }//GEN-LAST:event_btnImportExcelActionPerformed

    private void doNewLoadedInit()
    {
        hasGraphLoaded = true;
        txtBxLngtdFilterFrom.setText(((Integer) mdg.getMinAttribute()).toString());//set min Attribute
        txtBxLngtdFilterTo.setText(((Integer) mdg.getMaxAttribute()).toString());//set max attribute
        activeMinAttribute = mdg.getMinAttribute();
        activeMaxAttribute = mdg.getMaxAttribute();
        this.lblAllowedRange.setText("Allowed range is from " + txtBxLngtdFilterFrom.getText() + " to " + txtBxLngtdFilterTo.getText());
        this.viewPanel.setEnabled(true);

        this.chkBxComputeDegree.setSelected(false);
        this.chkBxComputeBtwnns.setSelected(false);
        this.chkBxComputeClsns.setSelected(false);
        isDegreeRanked = false;
        isClsnsRanked = false;
        isBtwnnsRanked = false;
        isEccntrctRanked = false;

    }
    private void btnExportToExcelActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnExportToExcelActionPerformed
    {//GEN-HEADEREND:event_btnExportToExcelActionPerformed
        // TODO add your handling code here:
        if (this.fc.showSaveDialog(this) == JFileChooser.APPROVE_OPTION)
        {
            readExcel.exportJTableModelDataToExcel(this.fc.getSelectedFile().getAbsolutePath(), dataTableController.getDataModel());
        } else
        {
            return;
        }
    }//GEN-LAST:event_btnExportToExcelActionPerformed

    private void txtBxLngtdFilterFromFocusLost(java.awt.event.FocusEvent evt)//GEN-FIRST:event_txtBxLngtdFilterFromFocusLost
    {//GEN-HEADEREND:event_txtBxLngtdFilterFromFocusLost
        // TODO add your handling code here:
        System.out.println();
    }//GEN-LAST:event_txtBxLngtdFilterFromFocusLost
    private void doAutoClick()
    {
        Runnable runner = new ClickThread(this);
        Thread thr = new Thread(runner);
        thr.start();
    }
    public int getXLocation()
    {
        return this.getLocation().x + this.jSplitPane2.getDividerLocation() + 40;
    }
    public int getYLocation()
    {
        return this.getLocation().y + this.panelGraph.getLocation().y + 40;
    }
    private void btnComputeActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnComputeActionPerformed
    {//GEN-HEADEREND:event_btnComputeActionPerformed
        // TODO add your handling code here:
        boolean attributeChanged = false;
        if (Integer.parseInt(txtBxLngtdFilterFrom.getText()) != activeMinAttribute || Integer.parseInt(txtBxLngtdFilterTo.getText()) != activeMaxAttribute)
        {//the attribute range has been changed. Let's populate the data table and the graph
            //check if the given range is within allowable limit
            if (!miv.checkRange(mdg.getMinAttribute(), mdg.getMaxAttribute(), Integer.parseInt(txtBxLngtdFilterFrom.getText()), Integer.parseInt(txtBxLngtdFilterTo.getText())))
            {
                return;//the range is not matched
            }
            attributeChanged = true;
            activeMinAttribute = Integer.parseInt(txtBxLngtdFilterFrom.getText());
            activeMaxAttribute = Integer.parseInt(txtBxLngtdFilterTo.getText());
            dataTableController.clearThenAddBasicGraphNode(mdg, activeMinAttribute, activeMaxAttribute);
            this.populateBasicGraphVisual(mdg, !hasGraphLoaded, false, Integer.parseInt(txtBxLngtdFilterFrom.getText()), Integer.parseInt(txtBxLngtdFilterTo.getText()),true);
        }

        if (chkBxComputeDegree.isSelected() && (attributeChanged || !isDegreeRanked))
        {
            this.rankByDegree(true);
        }
        isDegreeRanked = chkBxComputeDegree.isSelected();

        if (chkBxComputeBtwnns.isSelected() && (attributeChanged || !isBtwnnsRanked))//if user selects the degree ranking 
        {
            this.rankSizeByBtwnnsrCentrality(true);
        }
        isBtwnnsRanked = chkBxComputeBtwnns.isSelected();
        
        if (chkBxComputeClsns.isSelected() && (attributeChanged || !isClsnsRanked))//if user selects the degree ranking 
        {
            this.rankByClsnsCentrality(false);
        }
        isClsnsRanked = chkBxComputeClsns.isSelected();
        if (chkBxComputeEccntrct.isSelected() && (attributeChanged || !isEccntrctRanked))//if user selects the degree ranking 
        {
            this.rankByEcntrctCentrality(false);
        }
        isEccntrctRanked = chkBxComputeEccntrct.isSelected();        
        
        this.doAutoClick();
    }//GEN-LAST:event_btnComputeActionPerformed
    public void automate(String []args)
    {
        if(args.length > 0)
        {
            System.out.println("Got more than 0");
            readExcel = new ExcelHandler("C:\\Users\\User\\Desktop\\modifiedDatasetWithID.xls");
            try
            {
                mdg = new MyDirectedGraph();
                readExcel.readAndPopulateMyGraph(mdg,Integer.parseInt(args[0]));
                dataTableController.clearThenAddBasicGraphNode(mdg, mdg.getMinAttribute(), mdg.getMaxAttribute());//as new excel is loading, calling it with max and min possible attribute
                this.populateBasicGraphVisual(mdg, !hasGraphLoaded, true, mdg.getMinAttribute(), mdg.getMaxAttribute(),true);
                this.rankByDegree(false);
                this.rankSizeByBtwnnsrCentrality(false);
                this.rankByClsnsCentrality(false);
                readExcel.exportJTableModelDataToExcel("F:\\output"+args[0]+".xls", dataTableController.getDataModel());
                System.out.println("Done Really!");

            } catch (Exception e)
            {
                e.printStackTrace();
            }
        }
    }
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButton1ActionPerformed
    {//GEN-HEADEREND:event_jButton1ActionPerformed
        // TODO add your handling code here:
        
        String s = this.getExcelFileLocation();
        if (s == null || s.isEmpty())
        {//user cancelled file choosing
            return;
        }
        readExcel = new ExcelHandler(s);
        
        readExcel.prepareMargaretDataset(s, "E:\\margaret.xls", 12, 3);
        //readExcel.calculateCentralityOverlap(7, s, "E:\\table4And5Output2.xls");
        //readExcel.gCalculateIDAndFormatExcelStep1(6, false, true, "Month", s, "D:\\outputEnronEmail.xls");
        //readExcel.gCalculateIDAndFormatExcelStep1(1,true,true,"Week",s,"D:\\inputSimpleEmailWeekly.xls");
        //readExcel.gCalculateIDAndFormatExcelStep1(1,true,true,"Week",s,"E:\\inputSimpleEmailWeekly.xls");
        
        
//        readExcel.gCalculateANFromSINStep2(6,1,"Month",s,"D:\\outputEnronEmailAN.xls");
//        readExcel.gCalculateANFromSINStep2(16,1,"Week",s,"D:\\outputSimpleEmailAN.xls");
//        readExcel.gCalculateANFromSINStep2(7,1,"Week",s,"D:\\outputSimpleEmailAN.xls");//last used on student email dataset on 16 Sep
            
        //readExcel.calculateOutDegreeForMultipleSheetsAndMergeOne(8, 1, 42, s, "E:\\mergedData1.xls");//used last for HICCS paper on 16 Sep
                
        //readExcel.mergeAllSINCentralityInOneFileForAllActorStep3(2174, "C:\\Users\\User\\Desktop\\input", 0, 5, "D:\\outputSINDegree.xls", 1, "Degree")        ;
        //readExcel.mergeAllSINCentralityInOneFileForAllActorStep3(2174, "C:\\Users\\User\\Desktop\\input", 0, 5, "D:\\outputSINClsns.xls", 2, "Clsns")        ;
        //readExcel.mergeAllSINCentralityInOneFileForAllActorStep3(2174, "C:\\Users\\User\\Desktop\\input", 0, 5, "D:\\outputSINBtwnns.xls", 3, "Btwnns")        ;
        //readExcel.mergeAllSINCentralityInOneFileForAllActorStep3(42, "C:\\Users\\User\\Desktop\\input", 0, 2, "D:\\outputSINDegree.xls", 1, "Degree")        ;
        //readExcel.mergeAllSINCentralityInOneFileForAllActorStep3(42, "C:\\Users\\User\\Desktop\\input", 0, 2, "D:\\outputSINClsns.xls", 2, "Clsns")        ;
        //readExcel.mergeAllSINCentralityInOneFileForAllActorStep3(42, "C:\\Users\\User\\Desktop\\input", 0, 2, "D:\\outputSINBtwnns.xls", 3, "Btwnns")        ;
        
        //readExcel.calculateMesoDDAStep4(6, s, "D:\\outputMesoDDADegree.xls", "Degree");
        //readExcel.calculateMesoDDAStep4(6, s, "D:\\outputMesoDDAClsns.xls", "Clsns");
        //readExcel.calculateMesoDDAStep4(6, s, "D:\\outputMesoDDABtwnns.xls", "Btwnns");
        //readExcel.calculateMesoDDAStep4(3, s, "D:\\outputMesoDDADegree.xls", "Degree");
        //readExcel.calculateMesoDDAStep4(3, s, "D:\\outputMesoDDAClsns.xls", "Clsns");
        //readExcel.calculateMesoDDAStep4(3, s, "D:\\outputMesoDDABtwnns.xls", "Btwnns");
        
          
        //readExcel.formatAndExportEmailDataset(s, "D:\\output.xls");
        //readExcel.calculateTotalIncomingOutgoingforEmailDataset(s,"D:\\output.xls");
        //readExcel.calculateANForEmailDataset(s, "D:\\output.xls");
        //readExcel.calculateDDAEmailDataset(s, "D:\\output.xls");
        //readExcel.calculateDDAEmailDatasetNormalized(s,"D:\\output.xls");
        //readExcel.copyAllSINResultInOneSheet(s,"D:\\\\output.xls");
        //readExcel.compensateDegreeForSINs(s,"D:\\output.xls");
        //readExcel.doASCalculation("G:\\2004_2010.txt", "D:\\");
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton2ActionPerformed

    private void initGraph()
    {
        //**make sure previous data are cleared.
    }

    private void rankByDegree(boolean needColorTransform)
    {
        //Rank color by Degree
        Ranking degreeRanking = rankingController.getModel().getRanking(Ranking.NODE_ELEMENT, Ranking.DEGREE_RANKING);

        if (needColorTransform)
        {
            AbstractColorTransformer colorTransformer = (AbstractColorTransformer) rankingController.getModel().getTransformer(Ranking.NODE_ELEMENT, Transformer.RENDERABLE_COLOR);
            colorTransformer.setColors(new Color[]
                    {
                        new Color(0xFEF0D9), new Color(0xB30000)
                    });
            rankingController.transform(degreeRanking, colorTransformer);

        }

        dataTableController.addNewRankingColumn(LBLDEGCEN, degreeRanking, directedGraph, mdg.getNodeList());
        this.previewController.refreshPreview();
    }

    private void rankSizeByBtwnnsrCentrality(boolean needSizeTransform)
    {
        //Get Centrality, ranking controller is already initialized
        GraphDistance distance = new GraphDistance();
        distance.setDirected(true);
        distance.execute(graphModel, attributeModel);

        AttributeColumn centralityColumn = attributeModel.getNodeTable().getColumn(GraphDistance.BETWEENNESS);
        Ranking centralityRanking = rankingController.getModel().getRanking(Ranking.NODE_ELEMENT, centralityColumn.getId());
        if (needSizeTransform)
        {
            //Rank size by centrality
            AbstractSizeTransformer sizeTransformer = (AbstractSizeTransformer) rankingController.getModel().getTransformer(Ranking.NODE_ELEMENT, Transformer.RENDERABLE_SIZE);
            sizeTransformer.setMinSize(3);
            sizeTransformer.setMaxSize(20);
            rankingController.transform(centralityRanking, sizeTransformer);
        }
        dataTableController.addNewRankingColumn(LBLBTWNNSCEN, centralityRanking, directedGraph, mdg.getNodeList());

        this.previewController.refreshPreview();
    }

    private void rankByClsnsCentrality(boolean needSizeTransform)
    {
        //Get Centrality, ranking controller is already initialized
        GraphDistance distance = new GraphDistance();
        distance.setDirected(true);
        distance.execute(graphModel, attributeModel);

        //Rank size by centrality
        AttributeColumn centralityColumn = attributeModel.getNodeTable().getColumn(GraphDistance.CLOSENESS);
        Ranking centralityRanking = rankingController.getModel().getRanking(Ranking.NODE_ELEMENT, centralityColumn.getId());
        if (needSizeTransform)
        {
            AbstractSizeTransformer sizeTransformer = (AbstractSizeTransformer) rankingController.getModel().getTransformer(Ranking.NODE_ELEMENT, Transformer.RENDERABLE_SIZE);
            sizeTransformer.setMinSize(3);
            sizeTransformer.setMaxSize(20);
            rankingController.transform(centralityRanking, sizeTransformer);
        }
        dataTableController.addNewRankingColumn(LBLCLSNSCEN, centralityRanking, directedGraph, mdg.getNodeList());
        this.previewController.refreshPreview();
    }

    private void rankByEcntrctCentrality(boolean needSizeTransform)
    {
        //Get Centrality, ranking controller is already initialized
        GraphDistance distance = new GraphDistance();
        distance.setDirected(true);
        distance.execute(graphModel, attributeModel);

        //Rank size by centrality
        AttributeColumn centralityColumn = attributeModel.getNodeTable().getColumn(GraphDistance.ECCENTRICITY);
        Ranking centralityRanking = rankingController.getModel().getRanking(Ranking.NODE_ELEMENT, centralityColumn.getId());
        if (needSizeTransform)
        {
            AbstractSizeTransformer sizeTransformer = (AbstractSizeTransformer) rankingController.getModel().getTransformer(Ranking.NODE_ELEMENT, Transformer.RENDERABLE_SIZE);
            sizeTransformer.setMinSize(3);
            sizeTransformer.setMaxSize(20);
            rankingController.transform(centralityRanking, sizeTransformer);
        }
        dataTableController.addNewRankingColumn(LBLECCNTRCTCEN, centralityRanking, directedGraph, mdg.getNodeList());
        this.previewController.refreshPreview();        
    }
    private void initGraphVisual()
    {
        //Init a project - and therefore a workspace
        this.pc = Lookup.getDefault().lookup(ProjectController.class);
        pc.newProject();
        this.workspace = pc.getCurrentWorkspace();

//        //Import file. Code deleted

        //Get a graph model - it exists because we have a workspace
        this.graphModel = Lookup.getDefault().lookup(GraphController.class).getModel();
        this.directedGraph = graphModel.getDirectedGraph();//initialize directedGraph 
        this.attributeModel = Lookup.getDefault().lookup(AttributeController.class).getModel();
        this.rankingController = Lookup.getDefault().lookup(RankingController.class);
    }

    private void populateBasicGraphVisual(MyDirectedGraph mdg, boolean firstTimeCall, boolean clearNodes, int minAttribute, int maxAttribute, boolean needToDraw)
    {
        if (firstTimeCall && needToDraw)
        {
            this.initGraphVisual();
        }
        String nodeName;
        NodeList nl = mdg.getNodeList();
        Node tempNode;
        if (clearNodes)
        {
            directedGraph.clear();
            for (int i = 0; i < nl.getNodeCount(); i++)
            {
                nodeName = nl.getNodeIDAt(i) + "";
                tempNode = graphModel.factory().newNode(nodeName);
                tempNode.getNodeData().setLabel(nodeName);
                directedGraph.addNode(tempNode);
            }
        } else
        {
            directedGraph.clearEdges();
        }

        //SingleAttributeEdgeList sael = mdg.getSaEdgeList();
        //for(int i = 0;i<sael.)
        System.out.println("Total Node " + directedGraph.getNodeCount() + ". Total Edge: " + directedGraph.getEdgeCount());
        Node from, to;
        Edge tempEdge;
        float f;
        for (int i = 0; i < nl.getNodeCount(); i++)
        {
            //**wait to delete from = directedGraph.getNode(i + 1);//in directed graph the int param begins from 1
            from = directedGraph.getNode(nl.getNodeLabelAt(i));//in directed graph the int param begins from 1
            for (int j = 0; j < nl.getNodeCount(); j++)
            {
                if (true)//not skipping self edge
                {
                    f = mdg.findTotalEdgeWeight(nl.getNodeIDAt(i), nl.getNodeIDAt(j), minAttribute, maxAttribute);
                    if (f != 0)//there is a value
                    {
                        //**wait to delete to = directedGraph.getNode(j + 1);
                        to = directedGraph.getNode(nl.getNodeLabelAt(j));
                        if (from != null && to != null)
                        {
                            tempEdge = graphModel.factory().newEdge(from, to, f, true);
                            if (!directedGraph.addEdge(tempEdge))
                            {
                                System.out.println("Could not insert an Edge");
                            } else
                            {
                                System.out.println("Adding edge from " + nl.getNodeIDAt(i) + " to " + nl.getNodeIDAt(j) + " with weight " + f);
                            }
                        } else
                        {
                            System.out.println("There is a problem. Found null during edge insertion");
                        }
                    }
                }
            }
        }

        if (firstTimeCall && needToDraw)
        {
            //Preview configuration
            this.previewController = Lookup.getDefault().lookup(PreviewController.class);
            PreviewModel previewModel = previewController.getModel();
            previewModel.getProperties().putValue(PreviewProperty.SHOW_NODE_LABELS, Boolean.TRUE);
            previewModel.getProperties().putValue(PreviewProperty.NODE_LABEL_COLOR, new DependantOriginalColor(Color.BLUE));
            
            previewModel.getProperties().putValue(PreviewProperty.NODE_LABEL_OUTLINE_SIZE,2f);
            previewModel.getProperties().putValue(PreviewProperty.EDGE_CURVED, Boolean.TRUE);
            previewModel.getProperties().putValue(PreviewProperty.EDGE_OPACITY, 50);
            previewModel.getProperties().putValue(PreviewProperty.EDGE_RADIUS, 5f);
            previewModel.getProperties().putValue(PreviewProperty.BACKGROUND_COLOR, Color.WHITE);
            //previewModel.getProperties().putValue(PreviewProperty.NODE_OPACITY, 50);
            previewModel.getProperties().putValue(PreviewProperty.NODE_LABEL_FONT, new Font("SansSerif", Font.PLAIN, 20 ));
            //previewModel.getProperties().putValue(PreviewProperty,Color.BLUE );
            previewModel.getProperties().putValue(PreviewProperty.NODE_LABEL_PROPORTIONAL_SIZE, Boolean.FALSE);
            
            
            //this.runLayoutOnGraph();
        
        
            previewController.refreshPreview();

            //New Processing target, get the PApplet
            ProcessingTarget target = (ProcessingTarget) previewController.getRenderTarget(RenderTarget.PROCESSING_TARGET);
            PApplet applet = target.getApplet();
            applet.init();

            //Refresh the preview and reset the zoom
            previewController.render(target);
            target.refresh();
            target.resetZoom();

            //Add the applet to a JFrame and display
            //JFrame frame = new JFrame("Test Preview");
            //frame.setLayout(new BorderLayout());

            //frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
            //frame.add(applet, BorderLayout.CENTER);

            this.panelGraph.setLayout(new BorderLayout());
            this.panelGraph.add(applet, BorderLayout.CENTER);
            this.panelGraph.setVisible(false);

            //frame.pack();
            //this.pack();
            //this.panelGraph.updateUI();
        } else
        {
            previewController.refreshPreview();
        }
        //frame.setVisible(true); 
      //  for (Node n : directedGraph.getNodes())
       // {
         //   Node[] neighbors = directedGraph.getNeighbors(n).toArray();
          //  System.out.println(n.getNodeData().getLabel() + " has " + neighbors.length + " neighbors" + " and ID is " + n.getId());
        //}
    }
    private void runLayoutOnGraph()
    {
                                    YifanHuLayout layout = new YifanHuLayout(null, new StepDisplacement(2f));
        layout.setGraphModel(graphModel);
       // layout.resetPropertiesValues();
        layout.setOptimalDistance(150f);
        

        layout.initAlgo();
        for (int i = 0; i < 1000 && layout.canAlgo(); i++) {
            layout.goAlgo();
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(final String args[])
    {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try
        {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels())
            {
                if ("Nimbus".equals(info.getName()))
                {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex)
        {
            java.util.logging.Logger.getLogger(SNA_GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex)
        {
            java.util.logging.Logger.getLogger(SNA_GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex)
        {
            java.util.logging.Logger.getLogger(SNA_GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex)
        {
            java.util.logging.Logger.getLogger(SNA_GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */

        java.awt.EventQueue.invokeLater(new Runnable()
        {
            public void run()
            {
                SNA_GUI sg = new SNA_GUI();
                sg.setVisible(true);
                sg.automate(args);
                System.out.println("WOW");
            }
        });
    }

   
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Betweenness;
    private javax.swing.JButton btnCompute;
    private javax.swing.JButton btnExportToExcel;
    private javax.swing.JButton btnImportExcel;
    private javax.swing.JCheckBox chkBxComputeBtwnns;
    private javax.swing.JCheckBox chkBxComputeClsns;
    private javax.swing.JCheckBox chkBxComputeDegree;
    private javax.swing.JCheckBox chkBxComputeEccntrct;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JSplitPane jSplitPane2;
    private javax.swing.JLabel lblAllowedRange;
    private javax.swing.JTabbedPane panelData;
    private javax.swing.JPanel panelDataTable;
    private javax.swing.JPanel panelGraph;
    private javax.swing.JPanel panelGraphStat;
    private javax.swing.JTextField txtBxLngtdFilterFrom;
    private javax.swing.JTextField txtBxLngtdFilterTo;
    private javax.swing.JPanel viewPanel;
    // End of variables declaration//GEN-END:variables
}
class ClickThread implements Runnable
{
    private SNA_GUI sg;
    public ClickThread(SNA_GUI sg)
    {
        this.sg = sg;
    }
    public void run()
    {
        try
        {
            Thread.sleep(SNA_GUI.WAITTIMETOCLICK);
        } catch (Exception ex)
        {
        }
//        System.out.println(this.getSize());
//        System.out.println(this.getLocation() + " actual location");
//        System.out.println(this.panelGraph.getLocation() + " panelGraphLocation");
//        System.out.println(this.jSplitPane2.getDividerLocation() + " dividerLocation");
//        if(this.getState()==0)
//            System.out.println("window open");
//        else
//            System.out.println("window close");
        if(this.sg.getState()==0)//the window is not minimized. Not sure if it is on the top
        {
        try
        {
            Robot robot;
            robot = new Robot();
            Point p = MouseInfo.getPointerInfo().getLocation();
            robot.mouseMove(sg.getXLocation(), sg.getYLocation());
            //robot.mouseMove(100, 100);
            robot.mousePress(InputEvent.BUTTON1_MASK);
            robot.mouseRelease(InputEvent.BUTTON1_MASK);
            robot.mouseMove(p.x, p.y);
        } catch (AWTException ex)
        {
            Exceptions.printStackTrace(ex);
        }
        }
    }
}